// <auto-generated />
namespace MusicPlayerBackend.Persistence.Migrations

open System
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion
open MusicPlayerBackend.Persistence
open Npgsql.EntityFrameworkCore.PostgreSQL.Metadata

[<DbContext(typeof<FsharpAppDbContext>)>]
type FsharpAppDbContextModelSnapshot() =
    inherit ModelSnapshot()

    override this.BuildModel(modelBuilder: ModelBuilder) =
        modelBuilder
            .HasAnnotation("ProductVersion", "6.0.26")
            .HasAnnotation("Relational:MaxIdentifierLength", 63) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Album", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                |> ignore

            b.Property<string option>("CoverUri")
                .IsRequired(false)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.ToTable("Albums") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.AlbumTrack", (fun b ->

            b.Property<Guid>("AlbumId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<Guid>("TrackId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("AlbumId", "TrackId")
                |> ignore


            b.HasIndex("TrackId")
                |> ignore

            b.ToTable("AlbumTracks") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Playlist", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                |> ignore

            b.Property<string option>("CoverUri")
                .IsRequired(false)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<string>("Name")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<Guid>("OwnerUserId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<int>("Visibility")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("OwnerUserId")
                .IsUnique()
                |> ignore

            b.ToTable("Playlists") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.PlaylistUserPermission", (fun b ->

            b.Property<Guid>("PlaylistId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<Guid>("UserId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<int>("Permission")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("PlaylistId", "UserId", "Permission")
                |> ignore


            b.HasIndex("UserId")
                |> ignore

            b.ToTable("PlaylistUserPermissions") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.RefreshToken", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<Guid>("Jti")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<bool>("Revoked")
                .IsRequired(true)
                .HasColumnType("boolean")
                |> ignore

            b.Property<Guid>("Token")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<Guid>("UserId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset>("ValidDue")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("UserId")
                |> ignore

            b.ToTable("RefreshTokens") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Track", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                |> ignore

            b.Property<string>("Author")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<string option>("CoverUri")
                .IsRequired(false)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<string>("Name")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<Guid>("OwnerUserId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<string>("TrackUri")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<int>("Visibility")
                .IsRequired(true)
                .HasColumnType("integer")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("OwnerUserId")
                |> ignore

            b.ToTable("Tracks") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.TrackPlaylist", (fun b ->

            b.Property<Guid>("TrackId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<Guid>("PlaylistId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset>("AddedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.HasKey("TrackId", "PlaylistId")
                |> ignore


            b.HasIndex("PlaylistId")
                |> ignore

            b.ToTable("TrackPlaylist") |> ignore

        )) |> ignore

        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.User", (fun b ->

            b.Property<Guid>("Id")
                .IsRequired(true)
                .ValueGeneratedOnAdd()
                .HasColumnType("uuid")
                |> ignore

            b.Property<DateTimeOffset>("CreatedAt")
                .IsRequired(true)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<string>("Email")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<Guid>("FavoritePlaylistId")
                .IsRequired(true)
                .HasColumnType("uuid")
                |> ignore

            b.Property<string>("HashedPassword")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<string>("NormalizedEmail")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<string>("NormalizedUserName")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.Property<DateTimeOffset option>("UpdatedAt")
                .IsRequired(false)
                .HasColumnType("timestamp with time zone")
                |> ignore

            b.Property<string>("UserName")
                .IsRequired(true)
                .HasColumnType("text")
                |> ignore

            b.HasKey("Id")
                |> ignore


            b.HasIndex("NormalizedEmail")
                .IsUnique()
                |> ignore


            b.HasIndex("NormalizedUserName")
                .IsUnique()
                |> ignore

            b.ToTable("Users") |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.AlbumTrack", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.Album", "Album")
                .WithMany("AlbumTracks")
                .HasForeignKey("AlbumId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore
            b.HasOne("MusicPlayerBackend.Persistence.Entities.Track", "Track")
                .WithMany()
                .HasForeignKey("TrackId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Playlist", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.User", "OwnerUser")
                .WithOne("FavoritePlaylist")
                .HasForeignKey("MusicPlayerBackend.Persistence.Entities.Playlist", "OwnerUserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.PlaylistUserPermission", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.Playlist", "Playlist")
                .WithMany()
                .HasForeignKey("PlaylistId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore
            b.HasOne("MusicPlayerBackend.Persistence.Entities.User", "User")
                .WithMany("Permissions")
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.RefreshToken", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.User", "User")
                .WithMany()
                .HasForeignKey("UserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Track", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.User", "OwnerUser")
                .WithMany()
                .HasForeignKey("OwnerUserId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.TrackPlaylist", (fun b ->
            b.HasOne("MusicPlayerBackend.Persistence.Entities.Playlist", "Playlist")
                .WithMany("TrackPlaylists")
                .HasForeignKey("PlaylistId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore
            b.HasOne("MusicPlayerBackend.Persistence.Entities.Track", "Track")
                .WithMany()
                .HasForeignKey("TrackId")
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired()
                |> ignore

        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Album", (fun b ->

            b.Navigation("AlbumTracks")
            |> ignore
        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.Playlist", (fun b ->

            b.Navigation("TrackPlaylists")
            |> ignore
        )) |> ignore
        modelBuilder.Entity("MusicPlayerBackend.Persistence.Entities.User", (fun b ->

            b.Navigation("FavoritePlaylist")
            |> ignore

            b.Navigation("Permissions")
            |> ignore
        )) |> ignore

